#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../index');
var debug = require('debug')('express-manipdata:server');
var http = require('http');
const mongoose = require('mongoose')

const keys = require('../config/keys')

mongoose.Promise = global.Promise
const MONGO_URI = keys.mongoURI
if (!MONGO_URI) {
	throw new Error("incorrect mongoURI")
}
mongoose.connect(MONGO_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true
})
mongoose.connection
	.once('open', () => console.log('db connection successful'))
	.on('error', (err) => console.log('db connection error', err))



if(process.env.NODE_ENV === 'development'){
	app.listen(5000, () => {
		console.log('listen on port 5000');
	})
} 
else{

	/**
	 * Get port from environment and store in Express.
	 */
	
	var port = normalizePort(process.env.PORT || '3000')
	
	app.set('port', port);
	
	/**
	 * Create HTTP server.
	 */
	
	var server = http.createServer(app);
	
	/**
	 * Listen on provided port, on all network interfaces.
	 */
	
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
	
	/**
	 * Normalize a port into a number, string, or false.
	 */
	
	function normalizePort(val) {
	  var port = parseInt(val, 10);
	
	  if (isNaN(port)) {
	    // named pipe
	    return val;
	  }
	
	  if (port >= 0) {
	    // port number
	    return port;
	  }
	
	  return false;
	}
	
	/**
	 * Event listener for HTTP server "error" event.
	 */
	
	function onError(error) {
	  if (error.syscall !== 'listen') {
	    throw error;
	  }
	
	  var bind = typeof port === 'string'
	    ? 'Pipe ' + port
	    : 'Port ' + port;
	
	  // handle specific listen errors with friendly messages
	  switch (error.code) {
	    case 'EACCES':
	      console.error(bind + ' requires elevated privileges');
	      process.exit(1);
	      break;
	    case 'EADDRINUSE':
	      console.error(bind + ' is already in use');
	      process.exit(1);
	      break;
	    default:
	      throw error;
	  }
	}
	
	/**
	 * Event listener for HTTP server "listening" event.
	 */
	
	function onListening() {
	  var addr = server.address();
	  var bind = typeof addr === 'string'
	    ? 'pipe ' + addr
	    : 'port ' + addr.port;
	  debug('Listening on ' + bind);
	}

}
