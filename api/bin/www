#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../index');
var debug = require('debug')('express-manipdata:server');
var http = require('http');
const mongoose = require('mongoose')
const logger = require('../services/logger')

const {prod, dev} = require('../services/secrets')

mongoose.Promise = global.Promise

let MONGO_URI = '' 
process.env.NODE_ENV === "production" ? 
	MONGO_URI = prod(process.env.MONGO_URI) : 
	MONGO_URI = dev('MONGO_URI')

console.log("this is mongo: ", MONGO_URI)

if (!MONGO_URI) {
	throw new Error("incorrect mongoURI")
}
mongoose.connect(MONGO_URI, {
	useNewUrlParser: true,
	useUnifiedTopology: true
})
mongoose.connection
	.once('open', () => {
		console.log('db connection successful')
		logger.info('db connection successful')
	})
	.on('error', (err) => {
		console.log('db connection error', err)
		logger.error(`db connection error: ${err}`)
	})



if(process.env.NODE_ENV === 'development'){
	app.listen(5000, () => {
		console.log('listen on port 5000');
		logger.info('listen on port 5000')
	})
} 
else{
	/**
	 * Make sure the process stop if Docker send SIGINT OR SIGTERM
	 */
	process.on('SIGINT', function onSigint () {
	console.info('Got SIGINT (aka ctrl-c in docker). Graceful shutdown ', new Date().toISOString());
	  shutdown();
	});
	
	// quit properly on docker stop
	process.on('SIGTERM', function onSigterm () {
	  console.info('Got SIGTERM (docker container stop). Graceful shutdown ', new Date().toISOString());
	  shutdown();
	})
	
	// shut down server
	function shutdown() {
	  // NOTE: server.close is for express based apps
	  // If using hapi, use `server.stop`
	  server.close(function onServerClosed (err) {
	    	if (err) {
	      		console.error(err);
	      		process.exitCode = 1;
		}
		process.exit();
	  })
	}

	/**
	 * Get port from environment and store in Express.
	 */	
	var port = normalizePort(process.env.PORT || '3000')
	
	app.set('port', port);
	
	/**
	 * Create HTTP server.
	 */
	var server = http.createServer(app);
	
	/**
	 * Listen on provided port, on all network interfaces.
	 */
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
	
	/**
	 * Normalize a port into a number, string, or false.
	 */
	function normalizePort(val) {
	  var port = parseInt(val, 10);
	
	  if (isNaN(port)) {
	    // named pipe
	    return val;
	  }
	
	  if (port >= 0) {
	    // port number
	    return port;
	  }
	
	  return false;
	}
	
	/**
	 * Event listener for HTTP server "error" event.
	 */
	function onError(error) {
	  if (error.syscall !== 'listen') {
	    logger.error(`error.syscall !== listen: ${error}`)	  
	    throw error;
	  }
	
	  var bind = typeof port === 'string'
	    ? 'Pipe ' + port
	    : 'Port ' + port;
	
	  // handle specific listen errors with friendly messages
	  switch (error.code) {
	    case 'EACCES':
	      console.error(bind + ' requires elevated privileges');
	      logger.error(`${bind} requires elevated privileges`);
	      process.exit(1);
	      break;
	    case 'EADDRINUSE':
	      console.error(bind + ' is already in use');
	      logger.error(`${bind} is already in use`);
	      process.exit(1);
	      break;
	    default:
	      throw error;
	  }
	}
	
	/**
	 * Event listener for HTTP server "listening" event.
	 */
	function onListening() {
	  var addr = server.address();
	  var bind = typeof addr === 'string'
	    ? 'pipe ' + addr
	    : 'port ' + addr.port;
	  debug('Listening on ' + bind);
	}

}
